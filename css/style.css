<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Confidence Ranking</title>
  <!-- Put this in the <head> of every page -->
<link id="app-css" rel="stylesheet" href="./css/style.css?v=4" />

<script>
  // If ./css/style.css didn't load (wrong path/case), fall back to ./style.css
  (function () {
    function loaded(hrefPart) {
      return Array.from(document.styleSheets).some(s => (s.href || "").includes(hrefPart));
    }
    window.addEventListener('load', function () {
      if (!loaded('/css/style.css')) {
        const link = document.getElementById('app-css');
        link.href = './style.css?v=4';
        console.warn('Primary CSS not found; switched to fallback ./style.css');
      }
    });
  })();
</script>
</head>
<body>
  <div class="progress"><i style="width: 40%"></i></div>

  <main class="card">
    <h1>How confident do you feel about each problem?</h1>
    <p id="module-title" class="text-muted"></p>

    <div class="emoji-key card">
      <strong>Confidence key:</strong>
      😟 Not confident &nbsp;&nbsp; 😐 Somewhat &nbsp;&nbsp; 😄 Very confident
    </div>

    <form id="confidence-form" class="vertical-gap"></form>

    <button id="continue" disabled>Continue</button>
  </main>

  <script type="module">
    import { getKV, setKV, MODULE_TITLES, setProgress } from './app.js';

    const currentModule = getKV('currentModule');
    const ranked = getKV('rankings')?.[currentModule] || [];
    const confidence = {};
    const form = document.getElementById('confidence-form');
    const continueBtn = document.getElementById('continue');

    // Set header info
    if (currentModule && MODULE_TITLES[currentModule]) {
      document.getElementById('module-title').textContent =
        `Module: ${currentModule} — ${MODULE_TITLES[currentModule]}`;
    }

    // Render confidence rows
    ranked.forEach((qText, index) => {
      const row = document.createElement('div');
      row.className = 'confidence-row';

      const qLabel = document.createElement('div');
      qLabel.className = 'question-label';
      qLabel.textContent = qText;

      const options = document.createElement('div');
      options.className = 'emoji-options';

      ['😟', '😐', '😄'].forEach((emoji, level) => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'emoji-btn';
        btn.textContent = emoji;

        btn.addEventListener('click', () => {
          // Mark selected button
          options.querySelectorAll('button').forEach(b => b.classList.remove('selected'));
          btn.classList.add('selected');

          confidence[qText] = level;
          checkAllAnswered();
        });

        options.appendChild(btn);
      });

      row.appendChild(qLabel);
      row.appendChild(options);
      form.appendChild(row);
    });

    // Enable continue when all are answered
    function checkAllAnswered() {
      if (Object.keys(confidence).length === ranked.length) {
        continueBtn.disabled = false;
      }
    }

    continueBtn.addEventListener('click', () => {
      const allConfidence = getKV('confidence') || {};
      allConfidence[currentModule] = confidence;
      setKV('confidence', allConfidence);
      setProgress(60);
      window.location.href = 'q1.html';
    });

    setProgress(40);
  </script>
</body>
</html>
